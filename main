(function() {
  // ========== CSS DO HUD ==========
  const style = document.createElement("style");
  style.innerHTML = `
    #mobileHUD {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none; /* Não bloqueia clique no fundo */
      z-index: 9999;
    }
    .hudButton {
      pointer-events: auto;
      position: absolute;
      width: 64px;
      height: 64px;
      border-radius: 12px;
      background: rgba(0,0,0,0.6);
      color: white;
      font-size: 20px;
      font-weight: bold;
      display: flex;
      justify-content: center;
      align-items: center;
      user-select: none;
    }
    #joystickBase {
      position: absolute;
      left: 40px;
      bottom: 40px;
      width: 120px;
      height: 120px;
      border-radius: 50%;
      background: rgba(0,0,0,0.4);
      pointer-events: auto;
      touch-action: none;
    }
    #joystickStick {
      position: absolute;
      left: 35px;
      top: 35px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: rgba(150,150,255,0.9);
      pointer-events: none;
    }
  `;
  document.head.appendChild(style);

  // ========== HUD ==========
  const hud = document.createElement("div");
  hud.id = "mobileHUD";
  document.body.appendChild(hud);

  // Botão helper
  function createButton(label, x, y, key) {
    const btn = document.createElement("div");
    btn.className = "hudButton";
    btn.innerText = label;
    btn.style.right = x + "px";
    btn.style.bottom = y + "px";
    hud.appendChild(btn);

    let holding = false;
    let interval = null;

    const pressKey = () => {
      document.dispatchEvent(new KeyboardEvent("keydown", {key: key}));
    };
    const releaseKey = () => {
      document.dispatchEvent(new KeyboardEvent("keyup", {key: key}));
    };

    btn.addEventListener("touchstart", e => {
      e.preventDefault();
      holding = true;
      pressKey();
      interval = setInterval(pressKey, 120); // segurar repete
    });

    btn.addEventListener("touchend", e => {
      e.preventDefault();
      holding = false;
      clearInterval(interval);
      releaseKey();
    });
  }

  // Criando botões de skills
  createButton("1", 200, 200, "1");
  createButton("2", 270, 200, "2");
  createButton("3", 340, 200, "3");
  createButton("Q", 200, 120, "q");
  createButton("E", 270, 120, "e");
  createButton("R", 340, 120, "r");
  createButton("F", 200, 40, "f");
  createButton("4", 270, 40, "4");

  // Botão ataque (espaço)
  createButton("⚔", 100, 120, " ");

  // ========== JOYSTICK ==========
  const joyBase = document.createElement("div");
  joyBase.id = "joystickBase";
  const joyStick = document.createElement("div");
  joyStick.id = "joystickStick";
  joyBase.appendChild(joyStick);
  hud.appendChild(joyBase);

  let active = false;
  let joyCenter = {x: 0, y: 0};

  function sendKey(key, down) {
    document.dispatchEvent(new KeyboardEvent(down ? "keydown" : "keyup", {key: key}));
  }

  function releaseAll() {
    ["w","a","s","d"].forEach(k => sendKey(k, false));
  }

  joyBase.addEventListener("touchstart", e => {
    active = true;
    const rect = joyBase.getBoundingClientRect();
    joyCenter = {x: rect.left + rect.width/2, y: rect.top + rect.height/2};
  });

  joyBase.addEventListener("touchmove", e => {
    if (!active) return;
    const touch = e.touches[0];
    const dx = touch.clientX - joyCenter.x;
    const dy = touch.clientY - joyCenter.y;
    const dist = Math.min(Math.sqrt(dx*dx+dy*dy), 40);

    const angle = Math.atan2(dy, dx);
    joyStick.style.transform = `translate(${Math.cos(angle)*dist}px, ${Math.sin(angle)*dist}px)`;

    releaseAll();
    if (dy < -20) sendKey("w", true);
    if (dy > 20) sendKey("s", true);
    if (dx < -20) sendKey("a", true);
    if (dx > 20) sendKey("d", true);
  });

  joyBase.addEventListener("touchend", e => {
    active = false;
    joyStick.style.transform = `translate(0px,0px)`;
    releaseAll();
  });

})();
